import { useConnectionStore } from '@/stores/core/connectionStore'
import { computed } from 'vue'

/**
 * ËøûÊé•Áä∂ÊÄÅÁÆ°ÁêÜÁªÑÂêàÂºèÂáΩÊï∞
 * ËÅåË¥£ÔºöÊèê‰æõËøûÊé•Áä∂ÊÄÅÁöÑÂìçÂ∫îÂºèÊé•Âè£Ôºå‰∏çÁõ¥Êé•Â§ÑÁêÜ‰∫ã‰ª∂
 */
export function useConnection() {
  const connectionStore = useConnectionStore()

  // ËøûÊé•Áä∂ÊÄÅ
  const isConnected = computed(() => connectionStore.isConnected)
  const connectionState = computed(() => connectionStore.connectionState)
  const connectionError = computed(() => connectionStore.connectionError)
  const consecutiveFailures = computed(() => connectionStore.consecutiveFailures)

  // ËøûÊé•Áä∂ÊÄÅÊ∂àÊÅØ
  const connectionMessage = computed(() => {
    if (isConnected.value) {
      return 'Â∑≤ËøûÊé•Âà∞LeagueÂÆ¢Êà∑Á´Ø'
    } else if (connectionError.value) {
      return connectionError.value
    } else {
      switch (connectionState.value) {
        case 'Disconnected':
          return 'Á≠âÂæÖËøûÊé•Âà∞LeagueÂÆ¢Êà∑Á´Ø...'
        case 'ProcessFound':
          return 'Ê£ÄÊµãÂà∞ÂÆ¢Êà∑Á´ØËøõÁ®ãÔºåÊ≠£Âú®Âª∫Á´ãËøûÊé•...'
        case 'Unstable':
          return 'ËøûÊé•‰∏çÁ®≥ÂÆöÔºåÊ≠£Âú®ÈáçËØï...'
        case 'AuthExpired':
          return 'ËÆ§ËØÅ‰ø°ÊÅØÂ∑≤ËøáÊúüÔºåÊ≠£Âú®ÈáçÊñ∞Ëé∑Âèñ...'
        default:
          return 'Á≠âÂæÖËøûÊé•Âà∞LeagueÂÆ¢Êà∑Á´Ø...'
      }
    }
  })

  // ÊâãÂä®Ê£ÄÊü•ËøûÊé•
  const checkConnection = async () => {
    console.log('ÊâãÂä®Ê£ÄÊü•ËøûÊé•üôå')
    await connectionStore.checkConnection()
  }

  // Ê∏ÖÈô§ËøûÊé•‰ø°ÊÅØ
  const clearConnection = () => {
    connectionStore.clearAuthInfo()
  }

  return {
    // Áä∂ÊÄÅ
    isConnected,
    connectionState,
    connectionError,
    consecutiveFailures,
    connectionMessage,

    // ÊñπÊ≥ï
    checkConnection,
    clearConnection
  }
}
