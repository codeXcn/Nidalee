name: "🚀 Release (自动构建发布)"

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  release:
    name: "Build & Release (Win) (构建发布)"
    permissions:
      contents: write
    runs-on: windows-latest
    steps:
      - name: 📦 Checkout repository (检出代码)
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust (安装Rust)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: 🗄️ Rust cache (Rust缓存)
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: 🟢 Setup Node.js (安装Node.js)
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: 📥 Setup pnpm (安装pnpm)
        uses: pnpm/action-setup@v4

      - name: 📦 Install dependencies (安装依赖)
        run: pnpm install --no-frozen-lockfile

      - name: 🔧 Update version in tauri.conf.json (更新版本号)
        run: |
          $version = "${{ github.ref_name }}".Replace("v", "")
          $content = Get-Content "src-tauri/tauri.conf.json" -Raw
          # 匹配任意 semver 版本并替换
          $content = $content -replace '"version"\s*:\s*"[0-9]+\.[0-9]+\.[0-9]+"', "`"version`": `"$version`""
          Set-Content "src-tauri/tauri.conf.json" $content
          Write-Host "Updated version to $version in tauri.conf.json"

      - name: 🔧 Update version in Cargo.toml (更新Cargo版本)
        run: |
          $version = "${{ github.ref_name }}".Replace("v", "")
          $content = Get-Content "src-tauri/Cargo.toml" -Raw
          # 仅匹配以 version 开头的行，避免命中 rust-version
          $content = $content -replace '(?m)^\s*version\s*=\s*"[0-9]+\.[0-9]+\.[0-9]+"', "version = `"$version`""
          Set-Content "src-tauri/Cargo.toml" $content
          Write-Host "Updated version to $version in Cargo.toml"

      - name: 🏗️ Build and Release (构建发布)
        uses: tauri-apps/tauri-action@v0
        env:
          NODE_ENV: production
          VITE_WS_BASE_URL: ${{ vars.WS_BASE_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Tauri 更新签名私钥
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          # 传递版本号给 Tauri
          TAURI_VERSION: ${{ github.ref_name }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'Nidalee ${{ github.ref_name }}'
          releaseDraft: false
          prerelease: false
          args: ''
      - name: Upload updater manifest as artifact (latest.json)
        uses: actions/upload-artifact@v4
        with:
          name: latest-json-windows
          path: src-tauri/target/release/bundle/**/latest.json
          if-no-files-found: ignore

  release-mac:
    name: "Build & Release (macOS) (构建发布)"
    permissions:
      contents: write
    runs-on: macos-latest
    steps:
      - name: 📦 Checkout repository (检出代码)
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust (安装Rust)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin,x86_64-apple-darwin

      - name: 🗄️ Rust cache (Rust缓存)
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: 🟢 Setup Node.js (安装Node.js)
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: 📥 Setup pnpm (安装pnpm)
        uses: pnpm/action-setup@v4

      - name: 📦 Install dependencies (安装依赖)
        run: pnpm install --no-frozen-lockfile

      - name: 🔧 Update version in tauri.conf.json (更新版本号)
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          # 匹配任意 semver 版本并替换
          sed -i '' -E 's/"version"[[:space:]]*:[[:space:]]*"[0-9]+\.[0-9]+\.[0-9]+"/"version": "'$VERSION'"/g' src-tauri/tauri.conf.json
          echo "Updated version to $VERSION in tauri.conf.json"

      - name: 🔧 Update version in Cargo.toml (更新Cargo版本)
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          # 仅匹配以 version 开头的行，避免命中 rust-version
          sed -i '' -E 's/^([[:space:]]*)version[[:space:]]*=[[:space:]]*"[0-9]+\.[0-9]+\.[0-9]+"/\1version = "'$VERSION'"/' src-tauri/Cargo.toml
          echo "Updated version to $VERSION in Cargo.toml"

      - name: 🏗️ Build and Release (构建发布)
        uses: tauri-apps/tauri-action@v0
        env:
          NODE_ENV: production
          VITE_WS_BASE_URL: ${{ vars.WS_BASE_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          # 传递版本号给 Tauri
          TAURI_VERSION: ${{ github.ref_name }}

        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'Nidalee ${{ github.ref_name }}'
          releaseDraft: false
          prerelease: false
          args: ''

      - name: 📦 Upload updater manifest as artifact (latest.json)
        uses: actions/upload-artifact@v4
        with:
          name: latest-json-mac
          path: src-tauri/target/release/bundle/**/latest.json
          if-no-files-found: ignore

  publish-latest-json:
    name: "Publish latest.json (通用上传)"
    needs: [release, release-mac]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 🔍 List downloaded files (调试)
        run: |
          ls -R artifacts || true

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 🔗 Merge latest.json from platforms
        run: |
          node -e '
          const fs = require("fs");
          const path = require("path");
          function findAll(dir) {
            let results = [];
            for (const entry of fs.readdirSync(dir, { withFileTypes: true })) {
              const p = path.join(dir, entry.name);
              if (entry.isDirectory()) results = results.concat(findAll(p));
              else if (entry.isFile() && entry.name === "latest.json") results.push(p);
            }
            return results;
          }
          const files = fs.existsSync("artifacts") ? findAll("artifacts") : [];
          if (files.length === 0) {
            console.log("No latest.json found, skipping");
            process.exit(0);
          }
          if (files.length === 1) {
            // 单平台构建，直接复制为 latest.json
            const content = fs.readFileSync(files[0], "utf8");
            fs.writeFileSync("latest.json", content);
            console.log("Single latest.json copied.");
            process.exit(0);
          }
          let merged = null;
          for (const f of files) {
            const j = JSON.parse(fs.readFileSync(f, "utf8"));
            if (!merged) { merged = j; continue; }
            // 合并版本/说明以第一个为准，平台做并集
            merged.platforms = { ...(merged.platforms||{}), ...(j.platforms||{}) };
          }
          fs.writeFileSync("latest.json", JSON.stringify(merged, null, 2));
          console.log("Merged to latest.json");
          '

      - name: 📤 Upload latest.json to Release
        if: ${{ hashFiles('latest.json') != '' }}
        uses: softprops/action-gh-release@v2
        with:
          files: latest.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
